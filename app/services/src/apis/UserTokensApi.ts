// tslint:disable
/**
 * Backend API
 * API Documentation for Backend Project
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UserToken,
    UserTokenFromJSON,
    UserTokenToJSON,
} from '../models';

export interface ApiUserTokensIdDeleteRequest {
    id: number;
}

export interface ApiUserTokensIdGetRequest {
    id: string;
}

export interface ApiUserTokensIdPutRequest {
    id: number;
    userToken: UserToken;
}

export interface ApiUserTokensPostRequest {
    userToken: UserToken;
}

/**
 * no description
 */
export class UserTokensApi extends runtime.BaseAPI {

    /**
     */
    async apiUserTokensGetRaw(): Promise<runtime.ApiResponse<Array<UserToken>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("passport", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/user_tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserTokenFromJSON));
    }

   /**
    */
    async apiUserTokensGet(): Promise<Array<UserToken>> {
        const response = await this.apiUserTokensGetRaw();
        return await response.value();
    }

    /**
     */
    async apiUserTokensIdDeleteRaw(requestParameters: ApiUserTokensIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiUserTokensIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("passport", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/user_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    */
    async apiUserTokensIdDelete(requestParameters: ApiUserTokensIdDeleteRequest): Promise<void> {
        await this.apiUserTokensIdDeleteRaw(requestParameters);
    }

    /**
     */
    async apiUserTokensIdGetRaw(requestParameters: ApiUserTokensIdGetRequest): Promise<runtime.ApiResponse<UserToken>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiUserTokensIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("passport", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/user_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserTokenFromJSON(jsonValue));
    }

   /**
    */
    async apiUserTokensIdGet(requestParameters: ApiUserTokensIdGetRequest): Promise<UserToken> {
        const response = await this.apiUserTokensIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiUserTokensIdPutRaw(requestParameters: ApiUserTokensIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiUserTokensIdPut.');
        }

        if (requestParameters.userToken === null || requestParameters.userToken === undefined) {
            throw new runtime.RequiredError('userToken','Required parameter requestParameters.userToken was null or undefined when calling apiUserTokensIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("passport", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/user_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserTokenToJSON(requestParameters.userToken),
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    */
    async apiUserTokensIdPut(requestParameters: ApiUserTokensIdPutRequest): Promise<void> {
        await this.apiUserTokensIdPutRaw(requestParameters);
    }

    /**
     */
    async apiUserTokensPostRaw(requestParameters: ApiUserTokensPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userToken === null || requestParameters.userToken === undefined) {
            throw new runtime.RequiredError('userToken','Required parameter requestParameters.userToken was null or undefined when calling apiUserTokensPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("passport", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/user_tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserTokenToJSON(requestParameters.userToken),
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    */
    async apiUserTokensPost(requestParameters: ApiUserTokensPostRequest): Promise<void> {
        await this.apiUserTokensPostRaw(requestParameters);
    }

}
